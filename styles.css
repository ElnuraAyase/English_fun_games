const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const speedButton = document.getElementById('speedButton');
const startButton = document.getElementById('startButton');

let words = []; // Array to store falling words
let typedLetters = ''; // String to store typed letters
let matchedWords = 0; // Number of words matched
let ongoingScore = 0; // Ongoing score
let speedLevel = 1; // Speed level: 0 for slow, 1 for medium, 2 for fast
const speeds = [1, 3, 5]; // Speed values for slow, medium, and fast
const speedLabels = ['Slow', 'Medium', 'Fast'];
let gameRunning = false; // Flag to track if the game is running

let selectedTopic = 0; // Default topic index
const maxWords = 15; // Maximum number of words allowed on the screen
const topics = [
    {
        name: 'Food',
        words: ["apple", "banana", "orange", "grape", "strawberry", "melon", "pear", "pineapple", "peach", "kiwi", "cherry", "blueberry", "watermelon", "apricot", "coconut", "fig", "mango", "papaya", "plum", "lemon", "lime", "grapefruit", "avocado", "blackberry", "raspberry", "nectarine", "cranberry", "date", "guava"]
    },
    {
        name: 'Travel',
        words: ["vacation", "beach", "mountain", "hotel", "sightseeing", "passport", "ticket", "destination", "tourist", "flight", "cruise", "adventure", "souvenir", "guide", "explore", "journey", "resort", "culture", "excursion", "luggage", "seaside", "camping", "hostel", "itinerary", "visiting", "traveler", "backpacking", "sunscreen", "map"]
    }
    // Add more topics as needed
];


// Function to generate a random word
function generateWord() {
    const topicWords = topics[selectedTopic].words;
    const randomIndex = Math.floor(Math.random() * topicWords.length);
    const word = topicWords[randomIndex];
    return {
        text: word,
        x: Math.random() * (canvas.width - 100), // Random x-coordinate within canvas width
        y: 0, // Start from the top
        color: 'white' // Initial color
    };
}

// Function to draw the falling words
function drawWords() {
    ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas
    words.forEach(word => {
        ctx.fillStyle = word.color;
        ctx.font = '20px Arial';
        ctx.fillText(word.text, word.x, word.y);
    });
}

// Function to move the falling words downward
function moveWords() {
    words.forEach(word => {
        word.y += speeds[speedLevel]; // Change the speed based on the speed level
    });
}

function handleTyping(event) {
    const typedLetter = event.key.toLowerCase();
    
    // Allow only letters from the keyboard (a-z) and handle special keys
    if (!/^[a-zA-Z]$/.test(typedLetter)) {
        if (event.key === 'Enter') {
            typedLetters = ''; // Clear typed letters when Enter key is pressed
        } else if (event.key === 'Backspace') {
            typedLetters = typedLetters.slice(0, -1); // Remove last character when Backspace key is pressed
        }
        return; // Exit if the typed key is not a letter, Enter, or Backspace
    }

    // Handle typed letters
    typedLetters += typedLetter;
    let wordMatched = false; // Flag to track if a word has been matched
    
    // Check if any word matches the typed letters
    for (let i = 0; i < words.length; i++) {
        if (typedLetters === words[i].text.toLowerCase()) {
            words[i].color = 'yellow'; // Turn the matched word yellow
            wordMatched = true;
            typedLetters = ''; // Clear typed letters
            words.splice(i, 1); // Remove the matched word from the array
            matchedWords++; // Increment matched words count
            break; // Exit the loop after matching the word
        }
    }
}

// Function to start a new game
function startGame() {
    gameRunning = true;
    words = []; // Clear words array
    matchedWords = 0; // Reset matched words count
    gameLoop(); // Start the game loop
    startButton.blur(); // Remove focus from the start button
}

// Event listener for start game button
startButton.addEventListener('click', startGame); 

// Modify the update function to generate a new word when needed
function update() {
    if (!gameRunning) return; // Exit if game is not running

    if (words.length < maxWords && (words.length === 0 || words[words.length - 1].y >= canvas.height)) {
        // Generate a new word if there are fewer than maxWords or if the last word has reached the bottom
        words.push(generateWord());
    }

    moveWords();
}

// Function to render the game
function render() {
    if (!gameRunning) return; // Exit if game is not running
    drawWords();
    drawShooter(); // Draw shooter sign and typed letters
    // Draw top text
    ctx.fillStyle = 'white';
    ctx.font = '16px Arial';
    ctx.fillText("Matched Words: " + matchedWords, 10, 20); // Adjusted position for the matched words count
}


// Main game loop
function gameLoop() {
    if (!gameRunning) return; // Exit if game is not running
    update();
    render();
    requestAnimationFrame(gameLoop);
}

// Event listener for typing
window.addEventListener('keydown', handleTyping);

speedButton.addEventListener('click', () => {
    // Only change speed when the game is running
    if (gameRunning) {
        speedLevel = (speedLevel + 1) % speeds.length; // Cycle through speed levels
        speedButton.textContent = `Change Speed (${speedLabels[speedLevel]})`;
    }
});
